# Compatibility
CMAKE_MINIMUM_REQUIRED (VERSION 2.6)

# Project name
PROJECT (sp)

# Project version
SET (${PROJECT_NAME}_MAJOR_VERSION 0)
SET (${PROJECT_NAME}_MINOR_VERSION 1)
SET (${PROJECT_NAME}_PATCH_LEVEL 0)

SET (SPAWNER_PATH "${CMAKE_BINARY_DIR}/sp")
SET (BUILD_DIR "${CMAKE_BINARY_DIR}")
SET (ROOT_DIR "${PROJECT_SOURCE_DIR}")
SET (PROTOTYPE_TESTER "${ROOT_DIR}/bin/sp.exe")

ADD_SUBDIRECTORY("${PROJECT_SOURCE_DIR}/libspawner" libspawner)
ADD_SUBDIRECTORY("${PROJECT_SOURCE_DIR}/lib/json-cpp" jsoncpp)

INCLUDE_DIRECTORIES ("${PROJECT_SOURCE_DIR}/inc")
INCLUDE_DIRECTORIES ("${PROJECT_SOURCE_DIR}/libspawner")
INCLUDE_DIRECTORIES ("${PROJECT_SOURCE_DIR}/lib/json-cpp/json-cpp/src/lib_json") 
INCLUDE_DIRECTORIES ("${PROJECT_SOURCE_DIR}/lib/json-cpp/json-cpp/include")

#OPTION(MYPROJECT_DEBUG "Build the project using debugging code" ON)
#LIST (APPEND CMAKE_CXX_FLAGS "-std=c++11 ${CMAKE_CXX_FLAGS}")

IF (CMAKE_BUILD_TYPE)
ELSE (CMAKE_BUILD_TYPE)
	SET (CMAKE_BUILD_TYPE Release)
ENDIF (CMAKE_BUILD_TYPE)
SET (SP_BUILD_TYPE ${CMAKE_BUILD_TYPE})

# fix relative path
FILE (GLOB SOURCES ./src/*.cpp)
FILE (GLOB HEADERS ./inc/*.h)

FILE (GLOB LIB_WIN32_SOURCES "./src/win32/*.cpp")
FILE (GLOB LIB_NIX_SOURCES ./src/nix/*.cpp)

#SET (SOURCES ${SOURCES} "./src/main.cpp")


IF (UNIX)
	SET (SOURCES ${SOURCES} ${NIX_SOURCES})
ELSE (UNIX)
	IF (WIN32)
		SET (SOURCES ${SOURCES} ${WIN32_SOURCES})
	ENDIF (WIN32)
ENDIF (UNIX)

SET (PROJECT_EXECUTABLE ${PROJECT_NAME})
SET(CMAKE_EXE_LINKER_FLAGS "-static")
SET(BIN_PATH "../bin/new")
SET(BIN_SPECIFIC_PATH "../bin/new/${CMAKE_GENERATOR}")

ADD_EXECUTABLE (${PROJECT_EXECUTABLE} ${SOURCES} ${HEADERS})
add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD
	COMMAND ${CMAKE_COMMAND} -E make_directory ${BIN_PATH}
    COMMAND ${CMAKE_COMMAND} -E copy $<TARGET_FILE:${PROJECT_NAME}> ${BIN_PATH}
    COMMAND ${CMAKE_COMMAND} -E make_directory ${BIN_SPECIFIC_PATH}
    COMMAND ${CMAKE_COMMAND} -E copy $<TARGET_FILE:${PROJECT_NAME}> ${BIN_SPECIFIC_PATH}
)

TARGET_LINK_LIBRARIES(${PROJECT_EXECUTABLE} libspawner jsoncpp)